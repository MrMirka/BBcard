{"ast":null,"code":"var _jsxFileName = \"/Users/fredgan/Desktop/BBcard/BBcard/src/App/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { CardBox } from '../CardBox/CardBox';\nimport { TestScreen } from '../TestScreen/TestScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = ['./card-0.jpg', './card-1.jpg', './card-2.jpg', './card-3.jpg', './card-4.jpg', './card-5.jpg', './card-6.jpg', './card-7.jpg', './card-8.jpg', './card-9.jpg', './card-10.jpg', './card-11.jpg', './card-12.jpg', './card-13.jpg', './card-14.jpg', './card-15.jpg', './card-16.jpg', './card-17.jpg', './card-18.jpg', './card-19.jpg', './card-20.jpg'];\nfunction App() {\n  _s();\n  const [visible, setVisible] = useState(true);\n  const [active, setActive] = useState(false);\n  const [num] = useState(Math.floor(cards.length * Math.random()));\n  const cover = cards[num];\n  const onStateChange = state => {\n    let consoleText = 'Нет такого стейта';\n    switch (state) {\n      case 0:\n        {\n          consoleText = 'Ничего не начато, ничего не загружено';\n          break;\n        }\n      case 1:\n        {\n          consoleText = 'Все загружено, стартует анимация';\n          break;\n        }\n      case 2:\n        {\n          consoleText = 'Стартовая анимация закончилась, ждем отрыва(туц-туц-туц)';\n          break;\n        }\n      case 3:\n        {\n          consoleText = 'Отрыв произошел';\n          break;\n        }\n      case 4:\n        {\n          consoleText = 'Анимация окончания началась, можно показывать 2D';\n          setActive(true);\n          break;\n        }\n      case 5:\n        {\n          consoleText = 'Анимация окончания закончилась, можно вырубать';\n          setVisible(false);\n          break;\n        }\n    }\n    console.log(consoleText);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [visible && /*#__PURE__*/_jsxDEV(CardBox, {\n      cover: cover,\n      onStateChange: onStateChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(TestScreen, {\n      active: active,\n      num: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nALajwSI6jQBPEgpfDmDxYBDEVI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CardBox","TestScreen","jsxDEV","_jsxDEV","cards","App","_s","visible","setVisible","active","setActive","num","Math","floor","length","random","cover","onStateChange","state","consoleText","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/fredgan/Desktop/BBcard/BBcard/src/App/App.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {CardBox} from '../CardBox/CardBox';\nimport {CardInstanceState} from '../CardBox/instance/CardBoxInstance';\nimport {TestScreen} from '../TestScreen/TestScreen';\n\nconst cards = [ './card-0.jpg',\n               './card-1.jpg',\n               './card-2.jpg',\n               './card-3.jpg',\n               './card-4.jpg',\n               './card-5.jpg',\n               './card-6.jpg',\n               './card-7.jpg',\n               './card-8.jpg',\n               './card-9.jpg',\n               './card-10.jpg', \n               './card-11.jpg',\n               './card-12.jpg',\n               './card-13.jpg',\n               './card-14.jpg',\n               './card-15.jpg',\n               './card-16.jpg',\n               './card-17.jpg',\n               './card-18.jpg',\n               './card-19.jpg',\n               './card-20.jpg',\n\n              ];\n\nfunction App() {\n  const [visible, setVisible] = useState(true);\n  const [active, setActive] = useState(false);\n  const [num] = useState(Math.floor(cards.length * Math.random()));\n  const cover = cards[num];\n\n  const onStateChange = (state: CardInstanceState) => {\n    let consoleText = 'Нет такого стейта';\n    switch (state) {\n      case 0: {\n        consoleText = 'Ничего не начато, ничего не загружено';\n        break;\n      }\n      case 1: {\n        consoleText = 'Все загружено, стартует анимация';\n        break;\n      }\n      case 2: {\n        consoleText = 'Стартовая анимация закончилась, ждем отрыва(туц-туц-туц)';\n        break;\n      }\n      case 3: {\n        consoleText = 'Отрыв произошел';\n        break;\n      }\n      case 4: {\n        consoleText = 'Анимация окончания началась, можно показывать 2D';\n        setActive(true);\n        break;\n      }\n      case 5: {\n        consoleText = 'Анимация окончания закончилась, можно вырубать';\n        setVisible(false);\n        break;\n      }\n    }\n    console.log(consoleText);\n  }\n\n  return (\n    <div className=\"App\">\n      {visible && <CardBox cover={cover} onStateChange={onStateChange}/>}\n      <TestScreen active={active} num={num}/>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAO,WAAW;AAClB,SAAQC,OAAO,QAAO,oBAAoB;AAE1C,SAAQC,UAAU,QAAO,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,KAAK,GAAG,CAAE,cAAc,EACf,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,cAAc,EACd,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,EACf,eAAe,CAEf;AAEf,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACY,GAAG,CAAC,GAAGZ,QAAQ,CAACa,IAAI,CAACC,KAAK,CAACT,KAAK,CAACU,MAAM,GAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC;EAChE,MAAMC,KAAK,GAAGZ,KAAK,CAACO,GAAG,CAAC;EAExB,MAAMM,aAAa,GAAIC,KAAwB,IAAK;IAClD,IAAIC,WAAW,GAAG,mBAAmB;IACrC,QAAQD,KAAK;MACX,KAAK,CAAC;QAAE;UACNC,WAAW,GAAG,uCAAuC;UACrD;QACF;MACA,KAAK,CAAC;QAAE;UACNA,WAAW,GAAG,kCAAkC;UAChD;QACF;MACA,KAAK,CAAC;QAAE;UACNA,WAAW,GAAG,0DAA0D;UACxE;QACF;MACA,KAAK,CAAC;QAAE;UACNA,WAAW,GAAG,iBAAiB;UAC/B;QACF;MACA,KAAK,CAAC;QAAE;UACNA,WAAW,GAAG,kDAAkD;UAChET,SAAS,CAAC,IAAI,CAAC;UACf;QACF;MACA,KAAK,CAAC;QAAE;UACNS,WAAW,GAAG,gDAAgD;UAC9DX,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;IACF;IACAY,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;EAC1B,CAAC;EAED,oBACEhB,OAAA;IAAKmB,SAAS,EAAC,KAAK;IAAAC,QAAA,GACjBhB,OAAO,iBAAIJ,OAAA,CAACH,OAAO;MAACgB,KAAK,EAAEA,KAAM;MAACC,aAAa,EAAEA;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAClExB,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA,MAAO;MAACE,GAAG,EAAEA;IAAI;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAACrB,EAAA,CA7CQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}