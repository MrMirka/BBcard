{"ast":null,"code":"/* eslint-disable */\nimport { AnimationMixer, Group, MeshPhysicalMaterial, Vector2 } from 'three';\nconst processTexture = t => {\n  // t.wrapT = MirroredRepeatWrapping;\n  t.flipY = false;\n  // t.rotation = Math.PI;\n  // t.offset.x = -1\n\n  // t.minFilter = NearestFilter;\n  // t.magFilter = LinearFilter;\n  // t.wrapS = RepeatWrapping;\n  // t.wrapT = RepeatWrapping;\n  return t;\n};\nexport const getModel = (model, map, normalMap) => {\n  processTexture(map);\n  processTexture(normalMap);\n  const material = new MeshPhysicalMaterial({\n    // color: 'red',\n    // bumpMap,\n    // bumpScale: 1,\n    map,\n    normalMap,\n    normalScale: new Vector2(0.7, 0.7),\n    metalness: 0.2,\n    roughness: 0.45,\n    reflectivity: 0.9,\n    clearcoat: 0\n    // clearcoatRoughness: 1\n  });\n  const mixer = new AnimationMixer(model.scene);\n  const clip = model.animations[0];\n  const action = mixer.clipAction(clip).play();\n  // this._action.loop = LoopOnce;\n\n  model.scene.scale.setScalar(3.8);\n  let top;\n  model.scene.traverse(obj => {\n    if ('isMesh' in obj) {\n      const object = obj;\n      object.material = material;\n      if (object.name.toLowerCase() === 'top') {\n        top = object;\n      }\n    }\n  });\n  const rotation = new Group();\n  const animation = new Group();\n  rotation.add(model.scene);\n  animation.add(rotation);\n  return {\n    model,\n    mixer,\n    clip,\n    action,\n    top,\n    rotation,\n    animation\n  };\n};","map":{"version":3,"names":["AnimationMixer","Group","MeshPhysicalMaterial","Vector2","processTexture","t","flipY","getModel","model","map","normalMap","material","normalScale","metalness","roughness","reflectivity","clearcoat","mixer","scene","clip","animations","action","clipAction","play","scale","setScalar","top","traverse","obj","object","name","toLowerCase","rotation","animation","add"],"sources":["/Users/fredgan/Documents/Projects/BetBoom/Card/card/src/CardBox/instance/models/model.ts"],"sourcesContent":["/* eslint-disable */\nimport {AnimationMixer, Group, Mesh, MeshPhysicalMaterial, Texture, Vector2} from 'three';\nimport {GLTF} from 'three/examples/jsm/loaders/GLTFLoader';\n\n\nconst processTexture = (t: Texture): Texture => {\n  // t.wrapT = MirroredRepeatWrapping;\n  t.flipY = false;\n  // t.rotation = Math.PI;\n  // t.offset.x = -1\n\n  // t.minFilter = NearestFilter;\n  // t.magFilter = LinearFilter;\n  // t.wrapS = RepeatWrapping;\n  // t.wrapT = RepeatWrapping;\n  return t;\n}\n\nexport const getModel = (model: GLTF, map: Texture, normalMap: Texture) => {\n  processTexture(map);\n  processTexture(normalMap);\n\n  const material = new MeshPhysicalMaterial({\n    // color: 'red',\n    // bumpMap,\n    // bumpScale: 1,\n    map,\n    normalMap,\n    normalScale: new Vector2(0.7, 0.7),\n    metalness: 0.2,\n    roughness: 0.45,\n    reflectivity: 0.9,\n    clearcoat: 0,\n    // clearcoatRoughness: 1\n  });\n\n  const mixer = new AnimationMixer(model.scene);\n\n  const clip = model.animations[0];\n  const action = mixer.clipAction(clip).play();\n  // this._action.loop = LoopOnce;\n\n  model.scene.scale.setScalar(3.8);\n\n  let top: Mesh | undefined;\n  model.scene.traverse((obj) => {\n    if ('isMesh' in obj) {\n      const object = obj as Mesh;\n      object.material = material;\n      if (object.name.toLowerCase() === 'top') {\n        top = object;\n      }\n    }\n  });\n\n\n  const rotation = new Group();\n  const animation = new Group();\n  rotation.add(model.scene);\n  animation.add(rotation);\n\n  return {\n    model,\n    mixer,\n    clip,\n    action,\n    top,\n    rotation,\n    animation\n  }\n}"],"mappings":"AAAA;AACA,SAAQA,cAAc,EAAEC,KAAK,EAAQC,oBAAoB,EAAWC,OAAO,QAAO,OAAO;AAIzF,MAAMC,cAAc,GAAIC,CAAU,IAAc;EAC9C;EACAA,CAAC,CAACC,KAAK,GAAG,KAAK;EACf;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAOD,CAAC;AACV,CAAC;AAED,OAAO,MAAME,QAAQ,GAAGA,CAACC,KAAW,EAAEC,GAAY,EAAEC,SAAkB,KAAK;EACzEN,cAAc,CAACK,GAAG,CAAC;EACnBL,cAAc,CAACM,SAAS,CAAC;EAEzB,MAAMC,QAAQ,GAAG,IAAIT,oBAAoB,CAAC;IACxC;IACA;IACA;IACAO,GAAG;IACHC,SAAS;IACTE,WAAW,EAAE,IAAIT,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAClCU,SAAS,EAAE,GAAG;IACdC,SAAS,EAAE,IAAI;IACfC,YAAY,EAAE,GAAG;IACjBC,SAAS,EAAE;IACX;EACF,CAAC,CAAC;EAEF,MAAMC,KAAK,GAAG,IAAIjB,cAAc,CAACQ,KAAK,CAACU,KAAK,CAAC;EAE7C,MAAMC,IAAI,GAAGX,KAAK,CAACY,UAAU,CAAC,CAAC,CAAC;EAChC,MAAMC,MAAM,GAAGJ,KAAK,CAACK,UAAU,CAACH,IAAI,CAAC,CAACI,IAAI,CAAC,CAAC;EAC5C;;EAEAf,KAAK,CAACU,KAAK,CAACM,KAAK,CAACC,SAAS,CAAC,GAAG,CAAC;EAEhC,IAAIC,GAAqB;EACzBlB,KAAK,CAACU,KAAK,CAACS,QAAQ,CAAEC,GAAG,IAAK;IAC5B,IAAI,QAAQ,IAAIA,GAAG,EAAE;MACnB,MAAMC,MAAM,GAAGD,GAAW;MAC1BC,MAAM,CAAClB,QAAQ,GAAGA,QAAQ;MAC1B,IAAIkB,MAAM,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAK,KAAK,EAAE;QACvCL,GAAG,GAAGG,MAAM;MACd;IACF;EACF,CAAC,CAAC;EAGF,MAAMG,QAAQ,GAAG,IAAI/B,KAAK,CAAC,CAAC;EAC5B,MAAMgC,SAAS,GAAG,IAAIhC,KAAK,CAAC,CAAC;EAC7B+B,QAAQ,CAACE,GAAG,CAAC1B,KAAK,CAACU,KAAK,CAAC;EACzBe,SAAS,CAACC,GAAG,CAACF,QAAQ,CAAC;EAEvB,OAAO;IACLxB,KAAK;IACLS,KAAK;IACLE,IAAI;IACJE,MAAM;IACNK,GAAG;IACHM,QAAQ;IACRC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}