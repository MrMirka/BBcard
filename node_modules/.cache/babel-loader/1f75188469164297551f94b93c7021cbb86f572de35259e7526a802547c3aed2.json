{"ast":null,"code":"/* eslint-disable */\nimport { RoundedCubeGeometry, RoundedPlaneGeometry } from '../Rounded';\nimport { BackSide, Group, Mesh, MeshBasicMaterial, MeshPhongMaterial } from 'three';\nconst getRoundedPlane = (width, height, radius, z, material) => {\n  const plane = new RoundedPlaneGeometry(width / height, 1, radius / height);\n  if (material.map) {\n    material.map.repeat.set(height / width, 1);\n    material.map.offset.x = -(height / width - 1) / 2;\n  }\n  const mesh = new Mesh(plane, material);\n  mesh.position.set(-height / 2, -height / 2 + 35, z);\n  mesh.scale.setScalar(height);\n  return mesh;\n};\nexport const getCard = (backMap, frontMap) => {\n  const w = 212;\n  const h = 280;\n  const r = 12;\n  const d = 5;\n  const b = 0;\n  const geometry = new RoundedCubeGeometry(w, h, d, r, 0, 4);\n  const material = new MeshPhongMaterial({\n    //color: '#FF4560'\n    color: '#DADCDB'\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.position.y = 35;\n  const backMaterial = new MeshPhongMaterial({\n    map: backMap,\n    side: BackSide\n  });\n  const backMesh = getRoundedPlane(w, h, r, -(d / 2 + 0.1), backMaterial);\n  const frontMaterial = new MeshBasicMaterial({\n    color: '#FFF',\n    map: frontMap\n  });\n  const frontMesh = getRoundedPlane(w - b * 2, h - b * 2, r - b / 2, d / 2 + 0.1, frontMaterial);\n  const animation = new Group();\n  const rotation = new Group();\n  rotation.scale.setScalar(0.00135);\n  rotation.position.z = 0.005;\n  rotation.add(mesh, backMesh, frontMesh);\n  animation.add(rotation);\n  animation.rotation.y = Math.PI;\n  return {\n    geometry,\n    material,\n    mesh,\n    backMaterial,\n    backMesh,\n    frontMaterial,\n    frontMesh,\n    animation,\n    rotation\n  };\n};","map":{"version":3,"names":["RoundedCubeGeometry","RoundedPlaneGeometry","BackSide","Group","Mesh","MeshBasicMaterial","MeshPhongMaterial","getRoundedPlane","width","height","radius","z","material","plane","map","repeat","set","offset","x","mesh","position","scale","setScalar","getCard","backMap","frontMap","w","h","r","d","b","geometry","color","y","backMaterial","side","backMesh","frontMaterial","frontMesh","animation","rotation","add","Math","PI"],"sources":["/Users/fredgan/Desktop/BBcard/BBcard/src/CardBox/instance/card/card.ts"],"sourcesContent":["/* eslint-disable */\nimport {RoundedCubeGeometry, RoundedPlaneGeometry} from '../Rounded';\nimport {BackSide, Group, Mesh, MeshBasicMaterial, MeshPhongMaterial, Texture} from 'three';\n\n\nconst getRoundedPlane = (width: number, height: number, radius: number, z: number, material: MeshPhongMaterial | MeshBasicMaterial) => {\n  const plane = new RoundedPlaneGeometry(width / height, 1, radius / height);\n  if (material.map) {\n    material.map.repeat.set(height / width, 1);\n    material.map.offset.x = -(height / width - 1) / 2;\n  }\n  const mesh = new Mesh(plane, material);\n  mesh.position.set(-height / 2, -height / 2 + 35, z);\n  mesh.scale.setScalar(height);\n\n  return mesh;\n}\n\nexport const getCard = (backMap: Texture, frontMap: Texture) => {\n  const w = 212;\n  const h = 280;\n  const r = 12;\n  const d = 5;\n  const b = 0;\n\n  const geometry = new RoundedCubeGeometry(w, h, d, r, 0, 4);\n  const material = new MeshPhongMaterial({\n    //color: '#FF4560'\n    color: '#DADCDB'\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.position.y = 35\n\n  const backMaterial = new MeshPhongMaterial({\n    map: backMap,\n    side: BackSide\n  });\n  const backMesh = getRoundedPlane(\n    w,\n    h,\n    r,\n    -(d / 2 + 0.1),\n    backMaterial\n  );\n\n  const frontMaterial = new MeshBasicMaterial({\n    color: '#FFF',\n    map: frontMap\n  });\n  const frontMesh = getRoundedPlane(\n    w - b * 2,\n    h - b * 2,\n    r - b / 2,\n    d / 2 + 0.1,\n    frontMaterial\n  );\n\n  const animation = new Group();\n  const rotation = new Group();\n\n  rotation.scale.setScalar(0.00135);\n  rotation.position.z = 0.005;\n  rotation.add(mesh, backMesh, frontMesh);\n  animation.add(rotation);\n  animation.rotation.y = Math.PI;\n\n  return {\n    geometry,\n    material,\n    mesh,\n    backMaterial,\n    backMesh,\n    frontMaterial,\n    frontMesh,\n    animation,\n    rotation\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}