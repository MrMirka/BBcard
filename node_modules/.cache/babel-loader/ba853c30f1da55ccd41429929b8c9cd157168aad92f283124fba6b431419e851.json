{"ast":null,"code":"/* eslint-disable */import{AdditiveBlending,BufferAttribute,BufferGeometry,Group,Points,ShaderMaterial}from'three';import{generateStarTexture}from'./texture';import{RESOLUTION}from'../CardBoxInstance';const vertexShader=\"\\nattribute float size;\\nuniform float u_position;\\n\\nvoid main() {\\n  vec3 startPosition = position;\\n  startPosition.y = startPosition.y - (1.0 - u_position) * 1.5;\\n  startPosition.x = startPosition.x * u_position;\\n  vec4 mvPosition = modelViewMatrix * vec4( startPosition, 1.0 );\\n\\n  gl_PointSize = size * ( 2.0 / -mvPosition.z );\\n\\n  gl_Position = projectionMatrix * mvPosition;\\n}\\n\";const fragmentShader=\"\\nuniform sampler2D u_texture;\\nuniform float u_opacity;\\n\\nvoid main() {\\n  vec2 uv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );\\n\\n  gl_FragColor = texture2D( u_texture, uv );\\n  gl_FragColor.a = gl_FragColor.a * u_opacity;\\n}\\n\";export const generateStars=()=>{const num=400;const w=2;const h=2;const positions=new Float32Array(num*3);const sizes=new Float32Array(num);const rand=()=>0.5-Math.random();for(let i=0;i<num;i++){const v0=i*3;const v1=v0+1;const v2=v0+2;positions[v0]=rand()*w;positions[v1]=rand()*h;positions[v2]=rand()*(h/2-10);sizes[i]=(5+Math.random()*10)*RESOLUTION;}const geometry=new BufferGeometry();geometry.setAttribute('position',new BufferAttribute(positions,3));geometry.setAttribute('size',new BufferAttribute(sizes,1));const material=new ShaderMaterial({uniforms:{u_texture:{value:generateStarTexture()},u_opacity:{value:0},u_position:{value:0.5}},// fog: true,\ntransparent:true,depthTest:false,depthWrite:false,// side: DoubleSide,\nblending:AdditiveBlending,vertexShader,fragmentShader});const particles=new Points(geometry,material);const group=new Group();group.add(particles);return{geometry,material,particles,group};};","map":{"version":3,"names":["AdditiveBlending","BufferAttribute","BufferGeometry","Group","Points","ShaderMaterial","generateStarTexture","RESOLUTION","vertexShader","fragmentShader","generateStars","num","w","h","positions","Float32Array","sizes","rand","Math","random","i","v0","v1","v2","geometry","setAttribute","material","uniforms","u_texture","value","u_opacity","u_position","transparent","depthTest","depthWrite","blending","particles","group","add"],"sources":["/Users/fredgan/Documents/Projects/BetBoom/BBCard/src/CardBox/instance/stars/Stars.ts"],"sourcesContent":["/* eslint-disable */\nimport {AdditiveBlending, BufferAttribute, BufferGeometry, Color, Group, Points, ShaderMaterial} from 'three';\nimport {generateStarTexture} from './texture';\nimport {RESOLUTION} from '../CardBoxInstance';\n\nconst vertexShader = `\nattribute float size;\nuniform float u_position;\n\nvoid main() {\n  vec3 startPosition = position;\n  startPosition.y = startPosition.y - (1.0 - u_position) * 1.5;\n  startPosition.x = startPosition.x * u_position;\n  vec4 mvPosition = modelViewMatrix * vec4( startPosition, 1.0 );\n\n  gl_PointSize = size * ( 2.0 / -mvPosition.z );\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n`;\nconst fragmentShader = `\nuniform sampler2D u_texture;\nuniform float u_opacity;\n\nvoid main() {\n  vec2 uv = vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y );\n\n  gl_FragColor = texture2D( u_texture, uv );\n  gl_FragColor.a = gl_FragColor.a * u_opacity;\n}\n`;\n\n\nexport const generateStars = () => {\n  const num = 400;\n  const w = 2;\n  const h = 2;\n\n  const positions = new Float32Array(num * 3);\n  const sizes = new Float32Array(num);\n\n  const rand = () => 0.5 - Math.random();\n\n  for (let i = 0; i < num; i++) {\n    const v0 = i * 3;\n    const v1 = v0 + 1;\n    const v2 = v0 + 2;\n\n    positions[v0] = rand() * w;\n    positions[v1] = rand() * h;\n    positions[v2] = rand() * (h / 2 - 10);\n\n    sizes[i] = (5 + Math.random() * 10) * RESOLUTION;\n  }\n\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', new BufferAttribute(positions, 3));\n  geometry.setAttribute('size',     new BufferAttribute(sizes, 1));\n\n  const material = new ShaderMaterial({\n    uniforms: {\n      u_texture: {\n        value: generateStarTexture()\n      },\n      u_opacity: {\n        value: 0\n      },\n      u_position: {\n        value: 0.5\n      }\n    },\n    // fog: true,\n    transparent: true,\n    depthTest: false,\n    depthWrite: false,\n    // side: DoubleSide,\n    blending: AdditiveBlending,\n    vertexShader,\n    fragmentShader\n  });\n\n  const particles = new Points(geometry, material);\n  const group = new Group();\n  group.add(particles);\n\n  return {\n    geometry,\n    material,\n    particles,\n    group\n  }\n}"],"mappings":"AAAA,oBACA,OAAQA,gBAAgB,CAAEC,eAAe,CAAEC,cAAc,CAASC,KAAK,CAAEC,MAAM,CAAEC,cAAc,KAAO,OAAO,CAC7G,OAAQC,mBAAmB,KAAO,WAAW,CAC7C,OAAQC,UAAU,KAAO,oBAAoB,CAE7C,KAAM,CAAAC,YAAY,0YAcjB,CACD,KAAM,CAAAC,cAAc,8OAUnB,CAGD,MAAO,MAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CACjC,KAAM,CAAAC,GAAG,CAAG,GAAG,CACf,KAAM,CAAAC,CAAC,CAAG,CAAC,CACX,KAAM,CAAAC,CAAC,CAAG,CAAC,CAEX,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,YAAY,CAACJ,GAAG,CAAG,CAAC,CAAC,CAC3C,KAAM,CAAAK,KAAK,CAAG,GAAI,CAAAD,YAAY,CAACJ,GAAG,CAAC,CAEnC,KAAM,CAAAM,IAAI,CAAGA,CAAA,GAAM,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAEtC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,GAAG,CAAES,CAAC,EAAE,CAAE,CAC5B,KAAM,CAAAC,EAAE,CAAGD,CAAC,CAAG,CAAC,CAChB,KAAM,CAAAE,EAAE,CAAGD,EAAE,CAAG,CAAC,CACjB,KAAM,CAAAE,EAAE,CAAGF,EAAE,CAAG,CAAC,CAEjBP,SAAS,CAACO,EAAE,CAAC,CAAGJ,IAAI,CAAC,CAAC,CAAGL,CAAC,CAC1BE,SAAS,CAACQ,EAAE,CAAC,CAAGL,IAAI,CAAC,CAAC,CAAGJ,CAAC,CAC1BC,SAAS,CAACS,EAAE,CAAC,CAAGN,IAAI,CAAC,CAAC,EAAIJ,CAAC,CAAG,CAAC,CAAG,EAAE,CAAC,CAErCG,KAAK,CAACI,CAAC,CAAC,CAAG,CAAC,CAAC,CAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,EAAE,EAAIZ,UAAU,CAClD,CAEA,KAAM,CAAAiB,QAAQ,CAAG,GAAI,CAAAtB,cAAc,CAAC,CAAC,CACrCsB,QAAQ,CAACC,YAAY,CAAC,UAAU,CAAE,GAAI,CAAAxB,eAAe,CAACa,SAAS,CAAE,CAAC,CAAC,CAAC,CACpEU,QAAQ,CAACC,YAAY,CAAC,MAAM,CAAM,GAAI,CAAAxB,eAAe,CAACe,KAAK,CAAE,CAAC,CAAC,CAAC,CAEhE,KAAM,CAAAU,QAAQ,CAAG,GAAI,CAAArB,cAAc,CAAC,CAClCsB,QAAQ,CAAE,CACRC,SAAS,CAAE,CACTC,KAAK,CAAEvB,mBAAmB,CAAC,CAC7B,CAAC,CACDwB,SAAS,CAAE,CACTD,KAAK,CAAE,CACT,CAAC,CACDE,UAAU,CAAE,CACVF,KAAK,CAAE,GACT,CACF,CAAC,CACD;AACAG,WAAW,CAAE,IAAI,CACjBC,SAAS,CAAE,KAAK,CAChBC,UAAU,CAAE,KAAK,CACjB;AACAC,QAAQ,CAAEnC,gBAAgB,CAC1BQ,YAAY,CACZC,cACF,CAAC,CAAC,CAEF,KAAM,CAAA2B,SAAS,CAAG,GAAI,CAAAhC,MAAM,CAACoB,QAAQ,CAAEE,QAAQ,CAAC,CAChD,KAAM,CAAAW,KAAK,CAAG,GAAI,CAAAlC,KAAK,CAAC,CAAC,CACzBkC,KAAK,CAACC,GAAG,CAACF,SAAS,CAAC,CAEpB,MAAO,CACLZ,QAAQ,CACRE,QAAQ,CACRU,SAAS,CACTC,KACF,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}